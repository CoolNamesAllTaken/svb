version: '3.3'
name: svb-docker # This is appended as a prefix to all container names.

services:
  # NGINX Container for routing. Applies a custom configuration on top of the default nginx container.
  nginx:
    image: nginx
    # build: ./nginx
    restart: always
    ports:
      - 8081:80
      - 80:80 # HTTP
      - 443:443 # HTTPS
    volumes:
      # Bind mount the local nginx directory into the container to move over the configurations.
      - ./nginx:/etc/nginx/conf.d
      # - ./nginx/templates:/etc/nginx/templates
      # Bind mount folders from the local certbot directory into the container.
      - ./certbot/data/conf:/etc/letsencrypt
      - ./certbot/data/www:/var/www/certbot
    environment:
      - NGINX_HOST=foobar.com
      - NGINX_PORT=80

  # Certbot for SSL certificates.
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/data/conf:/etc/letsencrypt
      - ./certbot/data/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  db:
    image: postgres:16.0
    restart: always
    ports:
      - 5432:5432 # expose default port outside docker network for debugging access
    env_file:
      - .env.svb
    volumes:
      - svb-django-db:/var/lib/mysql

  site:
    # image specified in Dockerfile
    build:
      context: python
      dockerfile: Dockerfile
      target: prod
    restart: always
    ports:
      - 8000:8000
      # - 8082:80
    env_file:
      - .env.svb
    volumes:
      - ./python/svb_web:/app
    depends_on:
      - db
    entrypoint: >
      sh -c "python3 manage.py runserver 0.0.0.0:8000"
    # entrypoint: "/bin/sh -c 'while :; do sleep 100s; done;'"  #, "svb_web/manage.py", "runserver", "0.0.0.0:8000"]

volumes:
  svb-django-db: